/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
 ListNode* reverse(ListNode* head) {
        ListNode* curr=head;
        ListNode* prev=NULL;
        while(curr!=NULL){
            ListNode* next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        // ListNode* curr=head;
        // ListNode* prev=NULL;
        // int count=1;
        // while(count!=left){
        //     prev=curr;
        //     curr=curr->next;
        //     count++;
        // }
        // ListNode* start=curr;

        // while(count!=right){
        //     curr=curr->next;
        //     count++;
        // }
        // ListNode* rest=curr->next;
        // curr->next=NULL;
        // ListNode* newNode=reverse(start);
        // if(prev!=NULL){
        //   prev->next=newNode;
        // }
        // curr=newNode;
        // while(curr->next!=NULL){
        //     curr=curr->next;
        // }
        // curr->next=rest;

        // if(left==1){
        //     return newNode;
        // }
        // return head;


        /// Another approach......................

        if(head==NULL ||  left==right) return head ;
        ListNode* dummy=new ListNode(-1);
        dummy->next=head;
        ListNode* prev;
        prev=dummy;
        ListNode* tail=head;
        ListNode* temp=NULL;
        for(int i=1;i<left;i++){
            prev=tail;
            tail=tail->next;
        }

        for(int i=0;i<right-left;i++){
            temp=prev->next;
            prev->next=tail->next;
            tail->next=tail->next->next;
            prev->next->next=temp;
            // prev->next=tail->next;
            // temp=tail->next->next;
            // prev->next->next=tail;
            // tail->next=temp;
        }
        return dummy->next;

    }
};