/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        // many edge cases will have this problem
        if(head==NULL || n<=0){
            return head;
        }
        int len=0;
        ListNode* temp=head;
        while(temp){
            len++;
            temp=temp->next;
        }
        int count=len-n;
        ListNode* prev;
        ListNode* curr=head;
        int a=0;
        while(curr!=NULL){// if n is o 
            if(a==count){
                if(prev!=NULL){  // edge case
                    prev->next=curr->next;
                } else{ // most imp
                    head=curr->next;
                }
                delete curr;
                return head;
            }
            prev=curr;
            curr=curr->next;
            a++;

        }
        return head;
    }
};